# Copyright (c) 2018 Red Hat, Inc.
#
# This software is licensed to you under the GNU General Public License,
# version 2 (GPLv2). There is NO WARRANTY for this software, express or
# implied, including the implied warranties of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE. You should have received a copy of GPLv2
# along with this software; if not, see
# http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt.
#
# Red Hat trademarks are not licensed under GPLv2. No permission is
# granted to use or replicate Red Hat trademarks that are incorporated
# in this software or its documentation.

import base64
import json
import urllib.request

import dnf


ID_DOC_HEADER = "X-RHUI-ID"
ID_SIG_HEADER = "X-RHUI-SIGNATURE"
TOKEN_TTL_HEADER = "X-aws-ec2-metadata-token-ttl-seconds"
TOKEN_HEADER_ID = "X-aws-ec2-metadata-token"
ID_DOC_URL = "http://169.254.169.254/latest/dynamic/instance-identity/document"
ID_SIG_URL = "http://169.254.169.254/latest/dynamic/instance-identity/signature"
TOKEN_URL = "http://169.254.169.254/latest/api/token"

# Instance from one region will be redirected to another region's CDS for content
REDIRECT_MAP = {'us-gov-west-1': 'us-west-2', 'us-gov-east-1': 'us-east-2'}

# We do not want to use a proxy to read the Amazon instance metadata, so bypass
# any proxy that might be set, including by http{s}_proxy environment
# variable(s).
proxy_handler = urllib.request.ProxyHandler({})
opener = urllib.request.build_opener(proxy_handler)


def _read_aws_metadata(url, token):
    req = urllib.request.Request(url)
    req.add_header(TOKEN_HEADER_ID, token)
    try:
        with opener.open(req) as response:
            return response.read()
    except urllib.error.URLError:
        return None

def _get_token():
    req = urllib.request.Request(url=TOKEN_URL,
        data=b'', method='PUT')
    req.add_header(TOKEN_TTL_HEADER, '3600') # Time to live in seconds
    try:
        with opener.open(req) as response:
            return response.read()
    except urllib.error.URLError:
        return ''    


def _load_id(token):
    '''
    Loads and returns the Amazon metadata for identifying the instance.

    @rtype: string
    '''
    return _read_aws_metadata(ID_DOC_URL, token)


def _load_signature(token):
    '''
    Loads and returns the signature of hte Amazon identification metadata.

    @rtype: string
    '''
    return _read_aws_metadata(ID_SIG_URL, token)


class AmazonID(dnf.Plugin):
    """ Amazon ID plugin for RHUI clients

    The plugin reads amazon provided metadata, billing id included that is authorized
    on the CDS.
    """
    name = "AmazonID"

    def config(self):
        """Modify the HTTP headers on RHUI repositories

        Attaches two special HTTP headers used by the RHUI server
        to authorize clients requesting the resources.
        """

        # Retrieve the Amazon metadata
        token = _get_token()
        id_doc = _load_id(token)
        id_sig = _load_signature(token)
        id_doc_header = ""
        id_sig_header = ""

        if id_doc and id_sig:
            # Encode it so it can be inserted as an HTTP header
            # Signature does not need to be encoded, it already is.
            id_doc_header = base64.urlsafe_b64encode(id_doc).decode()
            id_sig_header = base64.urlsafe_b64encode(id_sig).decode()

        headers = [
            "{header}: {value}".format(header=ID_DOC_HEADER, value=id_doc_header),
            "{header}: {value}".format(header=ID_SIG_HEADER, value=id_sig_header)
        ]

        try:
            aws_region = json.loads(id_doc)['region']
        except KeyError:
            raise dnf.exceptions.MetadataError("Could not resolve the current AWS region")

        # Add the headers to all RHUI repos
        for repo in self._rhui_repos():
            repo._repo.setHttpHeaders(headers)
            self._fix_rhui_url_template(repo, aws_region)

    def _fix_rhui_url_template(self, repo, region):
        if region in REDIRECT_MAP:
            region = REDIRECT_MAP[region]

        if repo.baseurl:
            repo.baseurl = tuple(
                url.replace('REGION', region, 1) for url in repo.baseurl
            )
        elif repo.mirrorlist:
            repo.mirrorlist = repo.mirrorlist.replace('REGION', region, 1)
        else:
            raise dnf.exceptions.RepoError("RHUI repository %s does not have an url" % repo.name)

    def _rhui_repos(self):
        for repo_name, repo in self.base.repos.items():
            if 'rhui-' in repo_name:
                yield repo
